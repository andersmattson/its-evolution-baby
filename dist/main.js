/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./constants.js":
/*!**********************!*\
  !*** ./constants.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass ConstantsClass {\n\tDNA_BASE = 4;\n\tMAX_NEURONS = 255;\n\tMAX_CONNECTIONS = 255;\n\tNEURON_DATA_LENGTH = 10;\n\tCONNECTION_DATA_LENGTH = 10;\n\n\t#NEURON_TYPES = 0; // Set from neuron.js\n\tNEURON_TOTAL_LENGTH = -1; // Calculated\n\tNEURON_TYPE_LENGTH = -1; // Calculated\n\tCONNECTION_TOTAL_LENGTH = -1; // Calculated\n\tCONNECTION_INDEX_LENGTH = -1; // Calculated\n\tNEURON_INDEX_LENGTH = -1; // Calculated\n\n\tNEURON_DATA_MIDDLE = -1; // Calculated\n\n\tMAXIMUM_MOVING_DISTANCE = 0.001;\n\tANGLE_LIMIT = Math.PI * 4;\n\n\tconstructor () {\n\n\t\tthis.DNA_BASE = 4;\n\t\tthis.MAX_NEURONS = 255;\n\t\tthis.MAX_CONNECTIONS = 255;\n\t\tthis.NEURON_DATA_LENGTH = 10;\n\t\tthis.CONNECTION_DATA_LENGTH = 10;\n\t\n\t\tthis.#NEURON_TYPES = 0; // Set from neuron.js\n\t\tthis.NEURON_TOTAL_LENGTH = -1; // Calculated\n\t\tthis.NEURON_TYPE_LENGTH = -1; // Calculated\n\t\tthis.CONNECTION_TOTAL_LENGTH = -1; // Calculated\n\t\tthis.CONNECTION_INDEX_LENGTH = -1; // Calculated\n\t\tthis.NEURON_INDEX_LENGTH = -1; // Calculated\n\t\n\t\tthis.NEURON_DATA_MIDDLE = Math.pow( 4, this.NEURON_DATA_LENGTH ) / 2;\n\t\n\t\tthis.MAXIMUM_MOVING_DISTANCE = 0.03;\n\t\tthis.ANGLE_LIMIT = Math.PI * 4;\n\n\t\tthis.updateNeuronTypeCount( this.#NEURON_TYPES );\n\t}\n\n\tget NEURON_TYPES () {\n\t\treturn this.#NEURON_TYPES;\n\t}\n\n\tset NEURON_TYPES ( count ) {\n\t\tthis.updateNeuronTypeCount( count );\n\t}\n\n\tupdateNeuronTypeCount ( count ) {\n\t\tthis.#NEURON_TYPES = count;\n\t\tthis.NEURON_TYPE_LENGTH = this.NEURON_TYPES.toString( this.DNA_BASE ).length;\n\t\tthis.NEURON_TOTAL_LENGTH = this.NEURON_TYPE_LENGTH + this.NEURON_DATA_LENGTH;\n\t\tthis.NEURON_INDEX_LENGTH = this.MAX_NEURONS.toString( this.DNA_BASE ).length;\n\t\tthis.CONNECTION_INDEX_LENGTH = this.MAX_CONNECTIONS.toString( this.DNA_BASE ).length;\n\t\tthis.CONNECTION_TOTAL_LENGTH = this.CONNECTION_INDEX_LENGTH * 2 + this.CONNECTION_DATA_LENGTH;\n\t}\n}\n\nconst Constants = new ConstantsClass();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Constants);\n\n//# sourceURL=webpack://its-evolution-baby/./constants.js?");

/***/ }),

/***/ "./environment.js":
/*!************************!*\
  !*** ./environment.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Environment\": () => (/* binding */ Environment)\n/* harmony export */ });\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./network.js */ \"./network.js\");\n/* harmony import */ var _eventlistener_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eventlistener.js */ \"./eventlistener.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"./helpers.js\");\n/* harmony import */ var _neuron_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./neuron.js */ \"./neuron.js\");\n\n\n\n\nconst DEG180BYPI = 180 / Math.PI;\n\nclass Environment extends _eventlistener_js__WEBPACK_IMPORTED_MODULE_1__.EventListener {\n\n\t#networks = \t\t\t[];\n\t#reps = \t\t\t\t[];\n\trenderScale = \t\t\t{ x: 1, y: 1, xRatio: 1, yRatio: 1 };\n\t#networkOffset = \t\t{ x: -2, y: -2 };\n\n\t#canvas;\n\t#interval = \t\t\tnull;\n\t#evolution = \t\t\t0;\n\t#generation = \t\t\t0;\n\t#iteration = \t\t\t0;\n\t#iterationStartTime = \t0;\n\t#stepDelay = \t\t\t16;\n\t#maxIterations = \t\t100;\n\t#numNetworks = \t\t\t100;\n\t#mutationRate = \t\t0.01;\n\t#generationLastSize = \t0;\n\t#waitForStart = \t\tfalse;\n\t#numNeurons = \t\t\t10;\n\t#numConnections = \t\t10;\n\t#randomInitSpawn = \t\tfalse;\n\t#render = \t\t\t\tfalse;\n\t#survivorsOnly = \t\tfalse;\n\t#targets = \t\t\t\t[];\n\t#interactiveMode = \t\tfalse;\n\t#firstDNA = \t\t\tnull;\n\t#currentDNA = \t\t\t'';\n\n\ttargetArea = \t\t\t0;\n\tarea = \t\t\t\t\t0;\n\tstarted = \t\t\t\tfalse;\n\n\tconstructor( { \n\t\tcanvas, \n\t\tmaxIterations, \n\t\tnumNetworks, \n\t\tmutationRate, \n\t\twaitForStart,\n\t\tnumNeurons,\n\t\tnumConnections,\n\t\trandomInitSpawn,\n\t\trender,\n\t\tsurvivorsOnly\n\t} ) {\n\t\tsuper();\n\t\tthis.#canvas = canvas;\n\t\t\n\t\tthis.renderScale = {\n\t\t\tx: canvas.offsetWidth / 2,\n\t\t\ty: canvas.offsetHeight / 2,\n\t\t};\n\n\t\tif( this.renderScale.x > this.renderScale.y ) {\n\t\t\tthis.renderScale.xRatio = this.renderScale.x / this.renderScale.y;\n\t\t\tthis.renderScale.yRatio = 1;\n\t\t\tthis.renderScale.pixelScale = this.renderScale.y;\n\t\t} else {\n\t\t\tthis.renderScale.xRatio = 1;\n\t\t\tthis.renderScale.yRatio = this.renderScale.y / this.renderScale.x;\n\t\t\tthis.renderScale.pixelScale = this.renderScale.x;\n\t\t}\n\n\t\tthis.area = 4 * this.renderScale.xRatio * this.renderScale.yRatio;\n\n\t\tthis.#maxIterations = \t\tmaxIterations || 100;\n\t\tthis.#numNetworks = \t\tnumNetworks || 100;\n\t\tthis.#mutationRate = \t\tmutationRate || 0.01;\n\t\tthis.#waitForStart = \t\ttrue;\n\t\tthis.#numNeurons = \t\t\tnumNeurons \t\t|| 10;\n\t\tthis.#numConnections = \t\tnumConnections \t|| 10;\n\t\tthis.#generationLastSize = \tthis.#numNetworks;\n\t\tthis.#randomInitSpawn = \trandomInitSpawn || false;\n\t\tthis.#render = \t\t\t\trender || true;\n\t\tthis.#survivorsOnly = \t\tsurvivorsOnly || false;\n\t\tthis.#evolution = \t\t\t0;\n\t\tthis.#stepDelay = \t\t\t16;\n\n\t\tthis.initRepresentation();\n\t\tthis.initRandomNetworks();\n\n\t\trequestAnimationFrame( this.renderNetworks.bind( this ) );\n\n\t\tif( !waitForStart ) {\n\t\t\tthis.togglePause();\n\t\t}\n\t}\n\n\tinitRepresentation() {\n\t\tthis.#reps = [];\n\t\tdocument.querySelectorAll( '.network' ).forEach( ( rep ) => {\n\t\t\trep.parentElement.removeChild( rep );\n\t\t} );\n\t\tfor( let i = 0; i < this.#numNetworks; i++ ) {\n\t\t\tlet elem = document.createElement( 'div' );\n\t\t\telem.classList.add( 'network' );\n\t\t\telem.classList.add( `rep${i}` );\n\t\t\tthis.#canvas.appendChild( elem );\n\t\t\tthis.#reps.push( elem );\n\t\t}\n\t}\n\n\tgetRep( index ) {\n\t\treturn this.#reps[ index ]; //document.querySelector( `.rep${index}` );\n\t}\n\n\taddNetwork ( network ) {\n\t\tthis.#networks.push( network );\n\t\tif( this.#render ) {\n\t\t\tlet rep = this.getRep( this.#networks.length - 1 );\n\t\t\tlet position = this.pixelPosition( network.position );\n\t\t\trep.style.display = 'block';\n\t\t\trep.style.left = position.x + 'px';\n\t\t\trep.style.top = position.x + 'px';\n\t\t}\n\t}\n\n\tclearNetworks () {\n\t\tlet i = 0;\n\t\twhile( this.#networks.length ) {\n\t\t\tif( i < this.#reps.length ) {\n\t\t\t\tthis.getRep( i ).style.display = 'none';\n\t\t\t}\n\t\t\tthis.#networks.shift();\n\t\t\ti++;\n\t\t}\n\t}\n\n\trenderNetworks () {\n\n\t\tfor ( let i = 0; i < this.#networks.length; i++ ) {\n\n\t\t\tlet position = this.pixelPosition( this.#networks[ i ].position );\n\t\t\tlet rep = this.getRep( i );\n\t\t\trep.style.left = position.x + 'px';\n\t\t\trep.style.top = position.y + 'px';\n\t\t\trep.style.display = 'block';\n\t\t\trep.style.transform = `rotate(${this.#networks[ i ].direction * DEG180BYPI}deg)`;\n\n\t\t};\n\n\t\tif( this.#render ) {\n\t\t\trequestAnimationFrame( this.renderNetworks.bind( this ) );\n\t\t}\n\t}\n\n\tinitRandomNetworks () {\n\t\t\n\t\tthis.clearNetworks();\n\t\tthis.#generation = 0;\n\t\tthis.#evolution++;\n\n\t\tlet dna = _network_js__WEBPACK_IMPORTED_MODULE_0__.randomDNA( this.#numNeurons, this.#numConnections );\n\t\tthis.#firstDNA = dna;\n\t\tthis.#currentDNA = dna;\n\n\t\tfor ( let i = 0; i < this.#numNetworks; i++ ) {\n\t\t\tif( this.#randomInitSpawn ) {\n\t\t\t\tdna = _network_js__WEBPACK_IMPORTED_MODULE_0__.randomDNA( this.#numNeurons, this.#numConnections );\n\t\t\t}\n\t\t\tthis.addNetwork( _network_js__WEBPACK_IMPORTED_MODULE_0__.createNetwork( dna, this.renderScale ) );\n\t\t}\n\t}\n\n\tinitNetworksFromDnaSequence ( dna ) {\n\n\t\tthis.reset( false );\n\t\tthis.initRepresentation();\n\t\tthis.#firstDNA = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.dnaSequenceToNumbers)( dna );\n\n\t\tfor ( let i = 0; i < this.#numNetworks; i++ ) {\n\t\t\tthis.addNetwork( _network_js__WEBPACK_IMPORTED_MODULE_0__.createNetwork( this.#firstDNA, this.renderScale ) );\n\t\t}\n\t}\n\n\tregenerateNetworks () {\n\n\t\tthis.#iteration = 0;\n\t\tthis.#generation++;\n\t\tlet networks = [];\n\t\tthis.#generationLastSize = 0;\n\t\tlet networkIndex = [];\n\n\t\tthis.#networks.forEach( ( network, idx ) => {\n\n\t\t\tlet survived = this.#targets.reduce( ( acc, target ) => {\n\t\t\t\tacc += target.testFunction( network );\n\t\t\t\treturn acc;\t\t\n\t\t\t}, 0 );\n\n\t\t\tif( survived ) {\n\t\t\t\tthis.#generationLastSize++;\n\t\t\t\tthis.#currentDNA = network.dna;\n\t\t\t}\n\n\t\t\tlet offsprings = survived + ( this.#survivorsOnly ? 0 : 1 );\n\n\t\t\tfor ( let i = 0; i < offsprings; i++ ) {\n\t\t\t\tnetworkIndex.push( idx );\n\t\t\t}\n\n\t\t} );\n\n\t\twhile ( networks.length < this.#numNetworks ) {\n\t\t\tnetworks.push( _network_js__WEBPACK_IMPORTED_MODULE_0__.clone( this.#networks[ networkIndex[ Math.floor( Math.random() * networkIndex.length ) ] ], this.#mutationRate ) );\n\t\t}\n\t\t\n\t\tthis.clearNetworks();\n\t\tthis.#networks = networks;\n\n\t}\n\n\tstep() {\n\n\t\tthis.#targets.forEach( target => {\n\t\t\ttarget.step( {\n\t\t\t\titeration: this.#iteration,\n\t\t\t\trender: this.#render,\n\t\t\t\trenderScale: this.renderScale,\n\t\t\t} );\n\t\t} );\n\t\t\n\t\tfor ( let i = 0, l = this.#networks.length; i < l; i++ ) {\n\t\t\t_network_js__WEBPACK_IMPORTED_MODULE_0__.stepNetwork( this.#networks[ i ], this.#targets );\n\t\t};\n\n\t\tthis.#iteration++;\n\n\t}\n\n\tstart() {\n\n\t\tif( this.#networks.length === 0 ) {\n\t\t\tthis.initRandomNetworks();\n\t\t} else {\n\t\t\tthis.regenerateNetworks();\n\t\t}\n\n\t\tthis.started = true;\n\t\t\n\t\tthis.#iterationStartTime = Date.now();\n\t\tlet fn = this._step.bind( this );\n\t\tfor (let i = 0; i < this.#maxIterations; i++) {\n\t\t\tsetTimeout( fn, this.#stepDelay * i );\n\t\t}\n\n\t}\n\n\t_step() {\n\t\tthis.step();\n\t\tif ( this.#iteration >= this.#maxIterations && !this.#interactiveMode ) {\n\t\t\tthis.stop();\n\t\t}\n\t}\n\n\tstop() {\n\n\t\tclearInterval( this.#interval );\n\n\t\tconst stats = this.stats;\n\t\tstats.survivalRate = ( 100 * this.#generationLastSize / this.#numNetworks).toFixed( 2 );\n\n\t\tif( !this.#waitForStart && this.#networks.length ) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tthis.dispatchEvent( 'generation', stats );\n\n\t}\n\n\taddTarget ( target ) {\n\t\tthis.#targets.push( target );\n\t\tthis.#canvas.parentNode.appendChild( target.getElement() );\n\t\ttarget.getElement().style.width = ( target.radius * 2 * this.renderScale.x / this.renderScale.xRatio ) + 'px';\n\t\ttarget.getElement().style.height = ( target.radius * 2 * this.renderScale.y / this.renderScale.yRatio ) + 'px';\n\n\t\tthis.targetArea += target.area;\n\t}\n\n\ttogglePause( pause ) {\n\t\tif( pause === undefined ) {\n\t\t\tthis.#waitForStart = !this.#waitForStart;\n\t\t} else {\n\t\t\tthis.#waitForStart = pause;\n\t\t}\n\t\tif( !this.#waitForStart ) {\n\t\t\tthis.start();\n\t\t\tthis.dispatchEvent( 'pause', false );\n\t\t} else {\n\t\t\tthis.dispatchEvent( 'pause', true );\n\t\t}\n\t\treturn this.#waitForStart;\n\t}\n\n\ttoggleRender () {\n\t\tthis.#render = !this.#render;\n\t\tif( this.#render ) {\n\t\t\tthis.renderNetworks();\n\t\t}\n\t\treturn this.#render;\n\t}\n\n\ttoggleInteractiveMode () {\n\t\tthis.#interactiveMode = !this.#interactiveMode;\n\t\tthis.#targets.forEach( target => {\n\t\t\ttarget.setInteractive( this.#interactiveMode );\n\t\t});\n\t}\n\n\tupdateStepDelay ( stepDelay ) {\n\t\tthis.#stepDelay = stepDelay || 0;\n\t}\n\n\tpixelPosition( position ) {\n\t\treturn {\n\t\t\tx: this.renderScale.x + position.x * this.renderScale.pixelScale,\n\t\t\ty: this.renderScale.y + position.y * this.renderScale.pixelScale,\n\t\t}\n\t}\n\n\treset( init = true ) {\n\t\tlet state = this.#waitForStart;\n\t\tthis.togglePause( true );\n\t\tthis.clearNetworks();\n\t\tclearInterval( this.#interval );\n\t\tthis.#networks.length = 0;\n\t\tthis.#iteration = 0;\n\t\tthis.#generation = 0;\n\t\tthis.#evolution = 0;\n\t\tthis.#generationLastSize = 0;\n\t\tif( init ) {\n\t\t\tthis.initRandomNetworks();\n\t\t}\n\t\tthis.togglePause( state );\n\t\tthis.dispatchEvent( 'reset' );\n\t}\n\n\tget size() {\n\t\treturn this.#networks.length;\n\t}\n\n\tget stats() {\n\t\tlet connectedNeurons = 0;\n\t\tlet outputs = 0;\n\t\tlet hasMoved2D = 0;\n\t\tlet totalDistanceTraveled = 0;\n\t\tlet totalDnaLength = 0;\n\t\tlet neuronsInUse = new Set();\n\t\tthis.#networks.forEach( network => {\n\n\t\t\tif( network.position.x !== network.initialPosition.x && network.position.y !== network.initialPosition.y ) {\n\t\t\t\thasMoved2D++;\n\t\t\t}\n\t\t\tconnectedNeurons += network.connectedNeurons.length;\n\t\t\ttotalDistanceTraveled += network.totalDistanceTraveled;\n\t\t\ttotalDnaLength += network.dna.length;\n\t\t\tnetwork.connectedNeurons.forEach( neuron => {\n\t\t\t\tneuronsInUse.add( _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronDefinitions[neuron.type].neuronName );\n\t\t\t});\n\n\t\t} );\n\n\t\treturn {\n\t\t\tgeneration: this.#generation,\n\t\t\tsurvivalRate: this.started ? ( 100 * this.#networks.length / this.#generationLastSize ).toFixed( 2 ) * 1 : 0,\n\t\t\tsize: this.#networks.length,\n\t\t\tconnectedNeurons: connectedNeurons,\n\t\t\tconnectedNeuronsAvg: ( connectedNeurons / this.#networks.length ).toFixed( 2 ) * 1,\n\t\t\toutputs: outputs,\n\t\t\thasMoved2D: hasMoved2D,\n\t\t\tavgDistanceTraveled: ( totalDistanceTraveled / this.#networks.length ).toFixed( 2 ) * 1,\n\t\t\tavgDnaLength: ( totalDnaLength / this.#networks.length ).toFixed( 2 ) * 1,\n\t\t\ttotalDnaLength: totalDnaLength,\n\t\t\tduration: this.started ? ( Date.now() - this.#iterationStartTime ) : 0,\n\t\t\tcurrentDNA: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.numberToDnaSequence)( this.#currentDNA ),\n\t\t\ttargetAreaRatio: (this.targetAreaRatio * 100).toFixed( 2 ) * 1,\n\t\t\tneuronsInUse: neuronsInUse,\n\t\t}\n\t}\n\n\tget stepDelay() {\n\t\treturn this.#stepDelay;\n\t}\n\n\tget mutationRate() {\n\t\treturn this.#mutationRate;\n\t}\n\n\tset mutationRate( mutationRate ) {\n\t\tthis.#mutationRate = Math.min( 1, Math.max( 0, mutationRate ) );\n\t}\n\n\tget numNetworks() {\n\t\treturn this.#numNetworks;\n\t}\n\n\tset numNetworks( numNetworks ) {\n\t\tthis.#numNetworks = parseInt( numNetworks );\n\t\tthis.initRepresentation();\n\t\tthis.reset();\n\t}\n\n\tget numNeurons() {\n\t\treturn this.#numNeurons;\n\t}\n\n\tset numNeurons( numNeurons ) {\n\t\tthis.#numNeurons = parseInt( numNeurons );\n\t\tthis.reset();\n\t}\n\n\tget numConnections() {\n\t\treturn this.#numConnections;\n\t}\n\n\tset numConnections( numConnections ) {\n\t\tthis.#numConnections = parseInt( numConnections );\n\t\tthis.reset();\n\t}\n\n\tget targetsArea() {\n\t\treturn this.#targets.reduce( ( area, target ) => {\n\t\t\treturn area + target.area;\n\t\t}, 0 );\n\t}\n\n\tget targetAreaRatio() {\n\t\treturn this.targetArea / this.area;\n\t}\n\n\tget maxIterations() {\n\t\treturn this.#maxIterations;\n\t}\n\n\tset maxIterations( maxIterations ) {\n\t\tthis.#maxIterations = parseInt( maxIterations );\n\t}\n\n\tget generation() {\n\t\treturn this.#generation;\n\t}\n\n\tget iteration() {\n\t\treturn this.#iteration;\n\t}\n\n}\n\n\n\n//# sourceURL=webpack://its-evolution-baby/./environment.js?");

/***/ }),

/***/ "./eventlistener.js":
/*!**************************!*\
  !*** ./eventlistener.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventListener\": () => (/* binding */ EventListener)\n/* harmony export */ });\nclass EventListener {\n\t#events = {};\n\n\taddEventListener( event, callback ) {\n\t\tif( !this.#events[ event ] ) {\n\t\t\tthis.#events[ event ] = [];\n\t\t}\n\t\tthis.#events[ event ].push( callback );\n\t}\n\n\tremoveEventListener( event, callback ) {\n\t\tthis.#events[ event ].splice( this.#events[ event ].indexOf( callback ), 1 );\n\t}\n\n\tdispatchEvent( event, obj ) {\n\t\tconst self = this;\n\t\tif( this.#events[ event ] && this.#events[ event ].length ) {\n\t\t\t\n\t\t\tthis.#events[ event ].forEach( callback => {\n\t\t\t\tcallback.bind( this )( obj );\n\t\t\t});\n\t\t}\n\t}\n}\n\n\n\n//# sourceURL=webpack://its-evolution-baby/./eventlistener.js?");

/***/ }),

/***/ "./helpers.js":
/*!********************!*\
  !*** ./helpers.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getLineIntersection\": () => (/* binding */ getLineIntersection),\n/* harmony export */   \"dnaSequenceToNumbers\": () => (/* binding */ dnaSequenceToNumbers),\n/* harmony export */   \"numberToDnaSequence\": () => (/* binding */ numberToDnaSequence)\n/* harmony export */ });\nfunction getLineIntersection(p0, p1, p2, p3) { \n\tlet s1 = {}, s2 = {}; \n\t\n\ts1.x = p1.x - p0.x; \n\ts1.y = p1.y - p0.y; \n\ts2.x = p3.x - p2.x; \n\ts2.y = p3.y - p2.y; \n\n\tlet den1 = (-s2.x * s1.y + s1.x * s2.y);\n\tlet den2 = (-s2.x * s1.y + s1.x * s2.y);\n\t\n\tif( den1 == 0 || den2 == 0 ){\n\t\treturn false;\n\t}\n\n\tlet s, t; \n\t\n\ts = (-s1_y * (p0.x - p2.x) + s1.x * (p0.y - p2.y)) / den1; \n\tt = ( s2_x * (p0.y - p2.y) - s2.y * (p0.x - p2.x)) / den2;\n\t\n\tif (s >= 0 && s <= 1 && t >= 0 && t <= 1) { \n\t\treturn {\n\t\t\tx: p0.x + (t * s1.x),\n\t\t\ty: p0.y + (t * s1.y)\n\t\t};\n\t} \n\treturn false;\n}\n\nfunction dnaSequenceToNumbers( sequence ) {\n\treturn sequence.replace( /A/g, '0').replace( /C/g, '1').replace( /G/g, '2').replace( /T/g, '3');\n}\n\nfunction numberToDnaSequence( sequence ) {\n\treturn sequence.replace( /0/g, 'A').replace( /1/g, 'C').replace( /2/g, 'G').replace( /3/g, 'T');\n}\n\n\n\n//# sourceURL=webpack://its-evolution-baby/./helpers.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sparkline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sparkline.js */ \"./sparkline.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ \"./environment.js\");\n/* harmony import */ var _target_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./target.js */ \"./target.js\");\n/* harmony import */ var _neuron_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./neuron.js */ \"./neuron.js\");\n\n\n\n\n\nfunction $(selector) {\n\treturn document.querySelector(selector);\n}\n\nfunction $all(selector) {\n\treturn document.querySelectorAll(selector);\n}\n\nfunction updateNeuronDefinitions() {\n\t$('.active_neuron_types').innerText = _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronDefinitions.length;\n\t$('.disabled_neuron_types').innerText = _neuron_js__WEBPACK_IMPORTED_MODULE_3__.DisabledNeuronDefinitions.length + _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronDefinitions.length;\n}\n\nupdateNeuronDefinitions();\n\nfunction updateStats( stats){\n\n\tstats = stats || environment.stats;\n\tconst target = $(\".stats\");\n\t[ \n\t\t'generation', \n\t\t'survivalRate',\n\t\t'size', \n\t\t'connectedNeuronsAvg',\n\t\t'connectedNeurons',\n\t\t'avgDistanceTraveled',\n\t\t'avgDnaLength',\n\t\t'duration',\n\t\t'targetAreaRatio'\n\t].forEach( ( key ) => {\n\t\t$(`.stats .${key}`).innerHTML = stats[key];\n\t} );\n\n\tif( $('.currentDNA') !== document.activeElement ) {\n\t\t$('.currentDNA').innerHTML = stats.currentDNA;\n\t}\n\n\tplotData.shift();\n\tplotData.push( stats.survivalRate );\n\t\n\t_sparkline_js__WEBPACK_IMPORTED_MODULE_0__.sparkline( $(\".sparkline\"), plotData, plotOptions );\n\n\t_neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronDefinitions.forEach( ( neuron, i ) => {\n\t\tif( stats.neuronsInUse.has( neuron.neuronName ) ) {\n\t\t\t$(`.inuse_${neuron.neuronName}`).classList.add('active');\n\t\t} else {\n\t\t\t$(`.inuse_${neuron.neuronName}`).classList.remove('active');\n\t\t}\n\t} );\n}\n\nfunction renderNeuronType( neuron ) {\n\tlet list = $('.neuron_list');\n\tlet def = neuron.neuronName;\n\tlet elem = document.createElement( 'div' );\n\telem.classList.add( 'nDef' );\n\telem.innerHTML = \n\t`<input type=\"checkbox\" value=\"${def}\" class=\"${def}\" checked />\n\t<div>\n\t\t<div>${def} <span class=\"inuse inuse_${def}\">In use</span></div>\n\t\t<div class=\"nDefType\">Type: ${_neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronTypeNames[neuron.type]}, affects: ${Object.keys(neuron.affects).join() || 'none'}</div>\n\t\t<div class=\"nDefDesc\">f=${_neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronDefinitionMap[def].description}</div>\n\t</div>`;\n\tlist.appendChild( elem );\n}\n\nfunction renderNeuronCategory( type, title ) {\n\tlet list = $('.neuron_list');\n\tlet genTitle = document.createElement('h3');\n\tgenTitle.innerText = title;\n\tlist.appendChild( genTitle );\n\tObject.values( _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronDefinitionMap ).filter( ( def ) => def.type === type ).forEach( renderNeuronType );\n}\n\n[ \n\t{\n\t\ttitle: 'Sensors',\n\t\ttype: _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronTypes.SENSORY,\n\t},\n\t{\n\t\ttitle: 'Generators',\n\t\ttype: _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronTypes.GENERATOR,\n\t},\n\t{\n\t\ttitle: 'Synapses',\n\t\ttype: _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronTypes.SYNAPSE,\n\t},\n\t{\n\t\ttitle: 'Actors',\n\t\ttype: _neuron_js__WEBPACK_IMPORTED_MODULE_3__.NeuronTypes.ACTOR,\n\t},\n].forEach( ( item ) => {\n\trenderNeuronCategory( item.type, item.title );\n} );\n\n$('.apply_neurons').addEventListener( 'click', ( e ) => {\n\tif( confirm( 'This will reset the current simulation!' ) ){\n\t\t$all( '.nDef' ).forEach( elem => {\n\t\t\tlet input = elem.querySelector( 'input' );\n\t\t\tif( input.checked ) {\n\t\t\t\t(0,_neuron_js__WEBPACK_IMPORTED_MODULE_3__.enableNeuronDefinition)( input.value );\n\t\t\t\telem.classList.remove( 'disabled' );\n\t\t\t} else {\n\t\t\t\t(0,_neuron_js__WEBPACK_IMPORTED_MODULE_3__.disableNeuronDefinition)( input.value );\n\t\t\t\telem.classList.add( 'disabled' );\n\t\t\t}\n\t\t});\n\t\tupdateNeuronDefinitions();\n\t\tenvironment.reset();\n\t}\n} );\n\n$('.hide_neurons').addEventListener( 'click', () => {\n\t$('.neuron_list').classList.toggle( 'hidden' );\n});\n\n$('.display_neurons').addEventListener( 'click', () => {\n\t$('.neuron_list').classList.toggle( 'hidden' );\n});\n\n$('.show_info').addEventListener( 'click', () => {\n\t$('.neuron_list').classList.toggle( 'info_visible' );\n});\n\nlet plotData = new Array(100).fill(0);\n\nlet plotOptions = {\n\tspotRadius: 0,\n\tmax: 100\n};\n\n_sparkline_js__WEBPACK_IMPORTED_MODULE_0__.sparkline( $(\".sparkline\"), plotData, plotOptions );\n\nconst environment = new _environment_js__WEBPACK_IMPORTED_MODULE_1__.Environment({ \n\tcanvas: $('.environment'),\n\tnumNetworks: 400,\n\tnumNeurons: 32,\n\tnumConnections: 64,\n\tmutationRate: 0.5,\n\twaitForStart: true,\n\trandomInitSpawn: true,\n\tsurvivorsOnly: false,\n} );\n\nenvironment.addTarget( new _target_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]( environment, 0.5, 0.5, 0.2, '#ffff00', environment.renderScale ) );\n\nenvironment.addEventListener( 'generation', updateStats );\nenvironment.addEventListener( 'reset', updateStats );\nenvironment.dispatchEvent( 'reset' );\n\nenvironment.addEventListener( 'pause', ( state ) => {\n\t$('.pausa').innerHTML = state ? 'Start' : 'Pause';\n} );\n\n$(\".pausa\").addEventListener( 'click', () => environment.togglePause() );\n\n$(\".render\").addEventListener( 'click', () => environment.toggleRender());\n\n$(\".interactive\").addEventListener( 'click', () => environment.toggleInteractiveMode() );\n\n$(\".stepDelay\").addEventListener( 'input', ( e ) => {\n\tenvironment.updateStepDelay( e.target.value );\n\t$('.speed').innerHTML = environment.stepDelay;\n} );\n\n$(\".speed_reset\").addEventListener( 'click', ( e ) => {\n\tenvironment.updateStepDelay( 16 );\n\t$(\".stepDelay\").value = 16;\n\t$('.speed').innerHTML = environment.stepDelay;\n} );\n\n$(\".mutation_rate\").addEventListener( 'input', ( e ) => {\n\tenvironment.mutationRate = parseInt( e.target.value ) / 100;\n\t$('.mutrate').innerHTML = parseInt( e.target.value );\n} );\n\n$(\".num_networks\").addEventListener( 'change', ( e ) => {\n\tif( confirm('This will reset the network.') ) {\n\t\tenvironment.numNetworks = e.target.value;\n\t} else {\n\t\te.target.value = environment.numNetworks;\n\t}\n\t$('.nonetworks').innerHTML = environment.numNetworks;\n} );\n\n$(\".num_networks\").addEventListener( 'input', ( e ) => {\n\t$('.nonetworks').innerHTML = e.target.value;\n} );\n\n\n$(\".num_neurons\").addEventListener( 'change', ( e ) => {\n\tif( confirm('This will reset the network.') ) {\n\t\tenvironment.numNeurons = e.target.value;\n\t} else {\n\t\te.target.value = environment.numNeurons;\n\t}\n\t$('.noneurons').innerHTML = environment.numNeurons;\n} );\n\n$(\".num_neurons\").addEventListener( 'input', ( e ) => {\n\t$('.noneurons').innerHTML = e.target.value;\n} );\n\n$(\".num_connections\").addEventListener( 'change', ( e ) => {\n\tif( confirm('This will reset the network.') ) {\n\t\tenvironment.numConnections = e.target.value;\n\t} else {\n\t\te.target.value = environment.numConnections;\n\t}\n\t$('.noconnections').innerHTML = environment.numConnections;\n} );\n\n$(\".num_connections\").addEventListener( 'input', ( e ) => {\n\t$('.noconnections').innerHTML = e.target.value;\n} );\n\n$(\".max_iter\").addEventListener( 'input', ( e ) => {\n\tenvironment.maxIterations = e.target.value;\n\t$('.noiter').innerHTML = environment.maxIterations;\n} );\n\n$(\".iter_reset\").addEventListener( 'click', ( e ) => {\n\tenvironment.maxIterations = 100;\n\t$(\".max_iter\").value = 100;\n\t$('.noiter').innerHTML = environment.maxIterations;\n});\n\nlet timeout;\n$(\".currentDNA\").addEventListener( 'input', ( e ) => {\n\tif( environment.generation === 0 && environment.iteration === 0 ) {\n\t\tif( timeout ) {\n\t\t\tclearTimeout( timeout );\n\t\t}\n\t\ttimeout = setTimeout( () => {\n\t\t\tenvironment.initNetworksFromDnaSequence( e.target.value );\n\t\t\t\n\t\t\t$(\".connectedNeurons\").innerHTML = environment.stats.connectedNeurons;\n\t\t\t$(\".connectedNeuronsAvg\").innerHTML = environment.stats.connectedNeuronsAvg;\n\t\t}, 1000 );\n\t}\n});\n\n\n//# sourceURL=webpack://its-evolution-baby/./main.js?");

/***/ }),

/***/ "./network.js":
/*!********************!*\
  !*** ./network.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"randomDNA\": () => (/* binding */ randomDNA),\n/* harmony export */   \"createNetwork\": () => (/* binding */ createNetwork),\n/* harmony export */   \"connectNeurons\": () => (/* binding */ connectNeurons),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"stepNetwork\": () => (/* binding */ stepNetwork)\n/* harmony export */ });\n/* harmony import */ var _neuron_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./neuron.js */ \"./neuron.js\");\n/* harmony import */ var _outputfunctions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./outputfunctions.js */ \"./outputfunctions.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"./constants.js\");\n\n\n\n\n\nconst PI2 = 2 * Math.PI;\nconst DEG10 = Math.PI / 18;\nconst DEG15 = Math.PI / 12;\nconst DEG30 = Math.PI / 6;\nconst DEG45 = Math.PI / 4;\nconst DEG315 = Math.PI * 7 / 4;\nconst DEG330 = PI2 - DEG30;\nconst DEG350 = PI2 - DEG10;\n\nfunction randomInt( min = 0, max = 1 ) {\n\treturn Math.floor( Math.random() * ( max - min + 1 ) ) + min;\n}\n\nfunction fillValue( value, length ) {\n\tlet ret = value.toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\tif( ret.length > length ){\n\t\treturn ((_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE - 1) + \"\").repeat( length );\n\t} else {\n\t\treturn \"0\".repeat( length - ret.length ) + ret;\n\t}\n\t\t \n}\n\nfunction randomDNA( numNeurons, numConnections ) {\n\tlet ret = '';\n\tlet numNeuronsStr = numNeurons.toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\tlet numConnectionsStr = numConnections.toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\tret += fillValue( numNeuronsStr, _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH );\n\tret += fillValue( numConnectionsStr, _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_INDEX_LENGTH );\n\tfor( let i = 0; i < numNeurons; i++ ){\n\t\tret += fillValue(randomInt( 0, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronDefinitions.length - 1 ).toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_TYPE_LENGTH );\n\t\tret += fillValue(randomInt( 0, Math.pow( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE, 8 ) ).toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_DATA_LENGTH );\n\t}\n\tfor( let i = 0; i < numConnections; i++ ){\n\t\tlet inputIndex = fillValue(randomInt( 0, numNeurons - 1 ).toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH );\n\t\tlet outputIndex = fillValue(randomInt( 0, numNeurons - 1 ).toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH );\n\t\tret += inputIndex;\n\t\tret += outputIndex;\n\t\tret += fillValue(randomInt( 0, Math.pow( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE, 8 ) ).toString( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_DATA_LENGTH );\n\t}\n\treturn ret;\n}\n\nfunction createNetwork( dna, renderScale ) {\n\n\tlet network = {\n\t\tneurons: [],\n\t\t_connectedNeurons: new Set(),\n\t\tconnectedNeurons: [],\n\t\titeration: 0,\n\t\tposition: { x: 2 * ( Math.random() - 0.5 ) * renderScale.xRatio, y: 2 * ( Math.random() - 0.5 ) * renderScale.yRatio },\n\t\tdirection: Math.random() * PI2,\n\t\tspeed: 0,\n\t\tinitialPosition: { x: 0, y: 0 },\n\t\trenderScale: { x: 1, y: 1, xRatio: 1, yRatio: 1 },\n\t\tdna: dna,\n\t\ttotalDistanceTraveled: 0,\n\t\trenderScale: renderScale,\n\t}\n\n\tnetwork.initialPosition = { ...network.position };\n\tsetupFromDNA( network, dna );\n\n\treturn network;\n}\n\nfunction connectNeurons ( network, input, output, weight = 1 ) {\n\tif ( input.isNeuron && output.isNeuron ) {\n\t\tconst result = (0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.connectNeuronInput)( output, input, weight );\n\t\tif ( result ) {\n\t\t\tif( !network._connectedNeurons.has( input ) ) {\n\t\t\t\tnetwork._connectedNeurons.add( input );\n\t\t\t\tnetwork.connectedNeurons.push( input );\n\t\t\t}\n\t\t\tif( !network._connectedNeurons.has( output ) ) {\n\t\t\t\tnetwork._connectedNeurons.add( output );\n\t\t\t\tnetwork.connectedNeurons.push( output );\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\nfunction setupFromDNA ( network, dna ) {\n\n\tlet numNeurons = parseInt( dna.substring( 0, _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\tlet numConnections = parseInt( dna.substring( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH, _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_INDEX_LENGTH ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\n\tfor( let i = 0; i < numNeurons; i++ ){\n\t\tlet idx = _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_INDEX_LENGTH + i * _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_TOTAL_LENGTH;\n\t\tlet type = parseInt( dna.substring( idx, idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_TYPE_LENGTH ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\t\tlet initialValue = ( parseInt( dna.substring( idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_TYPE_LENGTH, idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_TOTAL_LENGTH ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE ) - _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_DATA_MIDDLE ) / _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_DATA_MIDDLE;\n\n\t\tif( type < _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronDefinitions.length ) {\n\t\t\tnetwork.neurons.push( (0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.createNeuron)({ initialValue, type }) );\n\t\t}\n\t}\n\n\tfor( let i = 0; i < numConnections; i++ ){\n\t\tlet idx = _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_INDEX_LENGTH + numNeurons * _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_TOTAL_LENGTH + i * _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_TOTAL_LENGTH;\n\n\t\tlet input = parseInt( dna.substring( idx, idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\t\tlet output = parseInt( dna.substring( idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH, idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_INDEX_LENGTH ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE );\n\t\tlet weight = ( parseInt( dna.substring( idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_INDEX_LENGTH, idx + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_TOTAL_LENGTH ), _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE ) - _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_DATA_MIDDLE ) / _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_DATA_MIDDLE;\n\n\t\tif( network.neurons[ input ] && network.neurons[ output ] ) {\n\t\t\tconnectNeurons( network, network.neurons[ input ], network.neurons[ output ], weight );\n\t\t}\n\t}\n}\n\nfunction clone ( network, mutate = 0.01 ) {\n\tlet chance = Math.random();\n\tlet dna = network.dna;\n\n\tif ( chance < mutate ) {\n\t\tlet index = randomInt( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NEURON_INDEX_LENGTH + _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CONNECTION_INDEX_LENGTH, network.dna.length - 1 );\n\t\tdna = network.dna.substring( 0, index - 1 ) + randomInt( 0, _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DNA_BASE - 1 ) + network.dna.substring( index );\n\t}\n\n\treturn createNetwork( dna, network.renderScale );\n}\n\nfunction stepNetwork( network, targets ) {\n\tnetwork.iteration++;\n\tlet smallestDistance = Infinity;\n\tlet closestTargetDirectionCoords = { x: 0, y: 0 };\n\tlet targetDirection = 0;\n\tlet direction = 0;\n\tlet speed = 0;\n\n\tfor ( let i = 0; i < targets.length; i++ ) {\n\t\tlet distance = targets[i].distance( network.position );\n\t\tif ( distance < smallestDistance ) {\n\t\t\tsmallestDistance = distance;\n\t\t\tclosestTargetDirectionCoords = { \n\t\t\t\tx: targets[i].x - network.position.x, \n\t\t\t\ty: targets[i].y - network.position.y\n\t\t\t};\n\t\t}\n\t}\n\n\ttargetDirection = Math.atan2( closestTargetDirectionCoords.y, closestTargetDirectionCoords.x );\n\ttargetDirection += targetDirection < 0 ? PI2 : 0;\n\n\tlet diff = Math.abs( targetDirection - network.direction );\n\t// let diffRightEye = Math.abs( targetDirection - network.direction - DEG15 );\n\t// let diffLeftEye = Math.abs( targetDirection - network.direction + DEG15 );\n\t// let targetVisibleRight = 0;\n\t// let targetVisibleLeft = 0;\n\n\t// if ( diffRightEye < DEG30 || diffRightEye > DEG315 ) {\n\t// \ttargetVisibleRight = 1;\n\t// }\n\t// if ( diffLeftEye < DEG30 || diffLeftEye > DEG315 ) {\n\t// \ttargetVisibleLeft = 1;\n\t// }\n\n\tlet targetVisible = 0;\n\n\tif( diff < DEG30 || diff > DEG330 ) {\n\t\ttargetVisible = 1;\n\t} else {\n\t\tsmallestDistance = Infinity;\n\t}\n\n\tfor ( let i = 0, l = network.connectedNeurons.length; i < l; i++ ) {\n\n\t\t(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.stepNeuron)( network.connectedNeurons[i], { \n\t\t\titeration: network.iteration,\n\t\t\t// position: network.position,\n\t\t\t// direction: network.direction,\n\t\t\t// speed: network.speed,\n\t\t\t// targetDirection: targetDirection,\n\t\t\tdistanceToTarget: smallestDistance,\n\t\t\t// targetVisibleLeft: targetVisibleLeft,\n\t\t\t// targetVisibleRight: targetVisibleRight,\n\t\t\ttargetVisible: targetVisible,\n\t\t} );\n\n\t\tif( network.connectedNeurons[i].affects.direction ) {\n\t\t\tdirection += network.connectedNeurons[i].value;\n\t\t}\n\t\tif( network.connectedNeurons[i].affects.speed ) {\n\t\t\tspeed += network.connectedNeurons[i].value;\n\t\t}\n\t}\n\n\tnetwork.direction = (network.direction + Math.max( -_constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ANGLE_LIMIT, Math.min( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].ANGLE_LIMIT, direction ) ) ) % ( PI2 );\n\tnetwork.direction += network.direction < 0 ? PI2 : 0;\n\tnetwork.speed = Math.max( 0, Math.min( _constants_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].MAXIMUM_MOVING_DISTANCE, network.speed + speed ) );\n\tnetwork.position.x += network.speed * Math.cos( network.direction );\n\tnetwork.position.y += network.speed * Math.sin( network.direction );\n\n\tnetwork.position.x = Math.min( Math.max( network.position.x, -network.renderScale.xRatio ), network.renderScale.xRatio );\n\tnetwork.position.y = Math.min( Math.max( network.position.y, -network.renderScale.yRatio ), network.renderScale.yRatio );\n\n\tnetwork.totalDistanceTraveled += network.speed;\n}\n\n\n//# sourceURL=webpack://its-evolution-baby/./network.js?");

/***/ }),

/***/ "./neuron.js":
/*!*******************!*\
  !*** ./neuron.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NeuronTypes\": () => (/* binding */ NeuronTypes),\n/* harmony export */   \"createNeuron\": () => (/* binding */ createNeuron),\n/* harmony export */   \"stepNeuron\": () => (/* binding */ stepNeuron),\n/* harmony export */   \"connectNeuronInput\": () => (/* binding */ connectNeuronInput),\n/* harmony export */   \"registerNeuronDefinition\": () => (/* binding */ registerNeuronDefinition),\n/* harmony export */   \"NeuronDefinitions\": () => (/* binding */ NeuronDefinitions),\n/* harmony export */   \"DisabledNeuronDefinitions\": () => (/* binding */ DisabledNeuronDefinitions),\n/* harmony export */   \"enableNeuronDefinition\": () => (/* binding */ enableNeuronDefinition),\n/* harmony export */   \"disableNeuronDefinition\": () => (/* binding */ disableNeuronDefinition),\n/* harmony export */   \"NeuronDefinitionMap\": () => (/* binding */ NeuronDefinitionMap),\n/* harmony export */   \"NeuronTypeNames\": () => (/* binding */ NeuronTypeNames)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./constants.js\");\n\n\nconst NeuronTypes = {\n\tSENSORY: 1, \t// Environment inputs only, outputs\n\tSYNAPSE: 2, \t// Both input and output\n\tACTOR: 4,\t\t// Only Inputs, environment outputs only\n\tGENERATOR: 8, \t// No inputs, only outputs\n\n\tINPUTS: 6,\n\tOUTPUTS: 11\n};\n\nconst NeuronTypeNames = Object.keys( NeuronTypes ).reduce( ( acc, key ) => {\n\tacc[ NeuronTypes[ key ] ] = key;\n\treturn acc;\n}, {} );\n\nconst NeuronDefinitions = [];\nconst DisabledNeuronDefinitions = [];\nconst NeuronDefinitionMap = {};\n\nfunction registerNeuronDefinition( fn, type = NeuronTypes.SYNAPSE, affects = {}, name = '', description = '' ) {\n\n\tif( NeuronDefinitionMap[ name ] ) {\n\t\tthrow new Error( `Neuron definition with name '${ name }' already exists.` );\n\t}\n\n\tfn.type = type;\n\tfn.affects = affects;\n\tfn.neuronName = name;\n\tfn.description = description;\n\tNeuronDefinitions.push( fn );\n\tNeuronDefinitionMap[ name ] = fn;\n\t_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NEURON_TYPES = NeuronDefinitions.length;\n}\n\nfunction enableNeuronDefinition( name ) {\n\tlet idx = DisabledNeuronDefinitions.findIndex( ( def ) => def.neuronName === name );\n\tif( idx !== -1 ) {\n\t\tNeuronDefinitions.push( DisabledNeuronDefinitions[idx] );\n\t\tDisabledNeuronDefinitions.splice( idx, 1 );\n\t\t_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NEURON_TYPES = NeuronDefinitions.length;\n\t}\n}\n\nfunction disableNeuronDefinition( name ) {\n\tlet idx = NeuronDefinitions.findIndex( ( def ) => def.neuronName === name );\n\tif( idx !== -1 ) {\n\t\tDisabledNeuronDefinitions.push( NeuronDefinitions[idx] );\n\t\tNeuronDefinitions.splice( idx, 1 );\n\t\t_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NEURON_TYPES = NeuronDefinitions.length;\n\t}\n}\n\nfunction stepNeuron ( neuron, args ) {\n\tneuron.iteration++;\n\tlet weightedInput = neuron.selfWeight * neuron.value;\n\tlet weightedAverage;\n\n\tfor( let i = 0; i < neuron.inputs.length; i++ ) {\n\t\tweightedInput += neuron.inputs[ i ].input.value * neuron.inputs[ i ].weight;\n\t}\n\t\n\tweightedInput += neuron.selfWeight * neuron.value;\n\tweightedAverage = weightedInput / ( neuron.inputs.length + 1 );\n\n\tneuron.value = NeuronDefinitions[ neuron.type ]( {\n\t\ttime: args.iteration, \t\t\t\t\t\t// Think of this as the time\n\t\tposition: args.position, \t\t\t\t\t\t// Think of this as the sight\n\t\tdistanceToTarget: args.distanceToTarget,\t\t// Think of this as the strength of a scent\n\t\ttargetDirection: args.targetDirection,\t\t\t// The direction the scent is coming from\n\t\tinitialValue: neuron.initialValue,\t\t\t\t// The initial value of the neuron, this comes from the DNA\n\t\tweightedInput,\t\t\t\t\t\t\t\t\t// The weighted input to the neuron\n\t\tweightedAverage,\t\t\t\t\t\t\t\t// The weighted average of the inputs\n\t\tvalue: neuron.value,\t\t\t\t\t\t\t// The current value of the neuron\n\t\ttargetVisible: args.targetVisible,\t\t\t\t// Is the target visible\n\t\tlastWeightedInput: neuron.lastWeightedInput,\t// The last weighted input to the neuron\n\t\tlastWeightedAverage: neuron.lastWeightedAverage,// The last weighted average of the inputs\n\t} );\n\n\tneuron.lastWeightedInput = weightedInput;\n\tneuron.lastWeightedAverage = weightedAverage;\n}\n\nfunction connectNeuronInput ( neuron, input, weight = 1 ) {\n\tif( input === neuron ) {\n\t\tif( (NeuronTypes.INPUTS & neuron.neuronType) !== 0 && (NeuronTypes.OUTPUTS & neuron.neuronType) !== 0 ) {\n\t\t\tneuron.selfWeight = weight;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t} else if ( (NeuronTypes.OUTPUTS & input.neuronType) !== 0 && (NeuronTypes.INPUTS & neuron.neuronType) !== 0 ) {\n\t\tneuron.inputs.push( { input, weight } );\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction createNeuron( { type, initialValue } ) {\n\tlet _type = type || 0;\n\tlet _initialValue = initialValue || 0;\n\treturn {\n\t\tisNeuron: true,\n\t\ttype: _type,\n\t\tinitialValue: _initialValue,\n\t\tvalue: _initialValue,\n\t\titeration: 0,\n\t\tneuronType: NeuronDefinitions[ _type ].type,\n\t\tinputs: [],\n\t\tselfWeight: 0,\n\t\taffects: NeuronDefinitions[ _type ].affects,\n\t\tlastWeightedInput: 0,\n\t\tlastWeightedAverage: 0,\n\t};\n}\n\n\n\n//# sourceURL=webpack://its-evolution-baby/./neuron.js?");

/***/ }),

/***/ "./outputfunctions.js":
/*!****************************!*\
  !*** ./outputfunctions.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _neuron_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./neuron.js */ \"./neuron.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./constants.js\");\n\n\n\nconst PI2 = Math.PI * 2;\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn 1 / ( 1 + args.distanceToTarget );\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.SENSORY, {}, 'InvertedTargetDistance', '1 / ( 1 + distanceToTarget )' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn args.targetVisible;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.SENSORY, {}, 'TargetVisible', 'targetVisible' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn Math.sin( args.time * args.initialValue );\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.GENERATOR, {}, 'Oscillator', 'sin( time * initialValue )' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn args.initialValue / ( 1 + args.time );\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.GENERATOR, {}, 'Decay', 'initialValue / ( 1 + time )' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn Math.exp( args.time * args.initialValue );\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.GENERATOR, {}, 'Exponential', 'exp( time * initialValue )' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn args.time * args.initialValue;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.GENERATOR, {}, 'Growth', 'time * initialValue' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function ( args ) {\n\treturn args.initialValue;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.GENERATOR, {}, 'Constant', 'initialValue' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn args.weightedInput;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.SYNAPSE, {}, 'WeightedSum', 'weightedInput' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn args.weightedAverage;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.SYNAPSE, {}, 'WeightedAverage', 'weightedAverage' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn Math.tanh( args.weightedInput );\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.SYNAPSE, {}, 'Tanh', 'tanh( weightedInput )' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn args.weightedInput / ( 1 + args.time );\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.SYNAPSE, {}, 'WeightedInputDecay', 'weightedInput / ( 1 + time )' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function( args ) {\n\treturn args.weightedInput - args.lastWeightedInput;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.SYNAPSE, {}, 'WeightedInputDerivative', 'weightedInput - lastWeightedInput' );\n\n// registerNeuronDefinition( function( args ) {\n// \treturn ( 2 * Math.random() - 1 );\n// }, NeuronTypes.GENERATOR, {}, 'Random', 'random()' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function ( args ) {\n\treturn Math.tanh( args.weightedInput ) * PI2;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.ACTOR, { direction: true }, 'Direction', 'tanh( weightedInput ) * 2π' );\n\n(0,_neuron_js__WEBPACK_IMPORTED_MODULE_0__.registerNeuronDefinition)( function ( args ) {\n\treturn Math.tanh( args.weightedInput ) * _constants_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MAXIMUM_MOVING_DISTANCE;\n}, _neuron_js__WEBPACK_IMPORTED_MODULE_0__.NeuronTypes.ACTOR, { speed: true }, 'Speed', 'tanh( weightedInput ) * MAX_DISTANCE' );\n\n/*\nregisterNeuronDefinition( function( args ) {\n\treturn args.targetVisibleRight;\n}, NeuronTypes.SENSORY, {}, 'TargetVisibleRight', 'targetVisibleRight' );\n\nregisterNeuronDefinition( function( args ) {\n\treturn args.targetVisibleLeft;\n}, NeuronTypes.SENSORY, {}, 'TargetVisibleLeft', 'targetVisibleLeft' );\n*/\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});\n\n//# sourceURL=webpack://its-evolution-baby/./outputfunctions.js?");

/***/ }),

/***/ "./sparkline.js":
/*!**********************!*\
  !*** ./sparkline.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sparkline\": () => (/* binding */ sparkline),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction getY(max, height, diff, value) {\n\tif (isNaN(height - (value * height / max) + diff)) {\n\t\treturn 0;\n\t}\n\treturn parseFloat((height - (value * height / max) + diff).toFixed(2));\n}\n\nfunction removeChildren(svg) {\n\t[...svg.querySelectorAll(\"*\")].forEach(element => svg.removeChild(element));\n}\n\nfunction buildElement(tag, attrs) {\n\tconst element = document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n\n\tfor (let name in attrs) {\n\t\telement.setAttribute(name, attrs[name]);\n\t}\n\n\treturn element;\n}\n\nfunction sparkline(svg, entries, options) {\n\tremoveChildren(svg);\n\n\tif (entries.length <= 1) {\n\t\treturn;\n\t}\n\n\toptions = options || {};\n\n\t// Define how big should be the spot area.\n\tconst spotRadius = options.spotRadius || 1;\n\tconst spotDiameter = spotRadius * 2;\n\n\t// Get the stroke width; this is used to compute the\n\t// rendering offset.\n\tconst strokeWidth = parseFloat(svg.attributes[\"stroke-width\"].value);\n\n\t// The rendering width will account for the spot size.\n\tconst width = parseFloat(svg.attributes.width.value) - spotDiameter * 2;\n\n\t// Get the SVG element's full height.\n\t// This is used\n\tconst fullHeight = parseFloat(svg.attributes.height.value);\n\n\t// The rendering height accounts for stroke width and spot size.\n\tconst height = fullHeight - (strokeWidth * 2) - spotDiameter;\n\n\t// The maximum value. This is used to calculate the Y coord of\n\t// each sparkline datapoint.\n\tconst max = options.max || Math.max(...entries) || 100;\n\n\t// Cache the last item index.\n\tconst lastItemIndex = entries.length - 1;\n\n\t// Calculate the X coord base step.\n\tconst offset = width / lastItemIndex;\n\n\t// Hold the line coordinates.\n\tconst pathY = getY(max, height, strokeWidth + spotRadius, entries[0]);\n\tlet pathCoords = `M${spotDiameter} ${pathY}`;\n\n\tentries.forEach((value, index) => {\n\t\tconst x = index * offset + spotDiameter;\n\t\tconst y = getY(max, height, strokeWidth + spotRadius, value);\n\t\tpathCoords += ` L ${x} ${y}`;\n\t});\n\n\tconst path = buildElement(\"path\", {\n\t\tclass: \"sparkline--line\",\n\t\td: pathCoords,\n\t\tstroke: \"black\",\n\t\tfill: \"none\"\n\t});\n\n\tsvg.appendChild(path);\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sparkline);\n\n//# sourceURL=webpack://its-evolution-baby/./sparkline.js?");

/***/ }),

/***/ "./target.js":
/*!*******************!*\
  !*** ./target.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\nclass Target {\n\n\telem;\n\t#interactive = false;\n\t#environment = null;\n\n\t#isDragged = false;\n\t#dragStartCoords;\n\t#dragStartXY;\n\n\tarea = 0;\n\n\tconstructor ( environment, x, y, radius, color ) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.radius = radius;\n\t\tthis.color = color;\n\t\tthis.#environment = environment;\n\n\t\tthis.area = Math.PI * this.radius * this.radius;\n\n\t\tthis.elem = document.createElement( 'div' );\n\t\tthis.elem.className = 'target';\n\t\tthis.elem.style.backgroundColor = color;\n\t\tthis.elem.style.borderRadius = '50%';\n\t\tthis.elem.style.position = 'absolute';\n\t\tthis.elem.addEventListener( 'mousedown', this.onMouseDown.bind( this ) );\n\t\tthis.elem.addEventListener( 'mouseup', this.onMouseUp.bind( this ) );\n\t\tthis.elem.addEventListener( 'mousemove', this.onMouseMove.bind( this ) );\n\n\t\tthis.setPosition( x, y );\n\t\tthis.updateEnvironmentPosition();\n\t}\n\n\tonMouseDown( e ) {\n\t\tif ( this.#interactive ) {\n\t\t\tthis.#isDragged = true;\n\t\t\tthis.#dragStartCoords = {\n\t\t\t\tx: e.clientX,\n\t\t\t\ty: e.clientY,\n\t\t\t};\n\t\t\tthis.#dragStartXY = {\n\t\t\t\tx: this.x,\n\t\t\t\ty: this.y,\n\t\t\t};\n\t\t}\n\t}\n\n\tonMouseUp( e ) {\n\t\tthis.#isDragged = false;\n\t}\n\n\tonMouseMove( e ) {\n\t\tif ( this.#interactive && this.#isDragged ) {\n\n\t\t\tlet deltaX = e.clientX - this.#dragStartCoords.x;\n\t\t\tlet deltaY = e.clientY - this.#dragStartCoords.y;\n\n\t\t\tthis.setPosition( this.#dragStartXY.x + deltaX / this.#environment.renderScale.x, this.#dragStartXY.y + deltaY / this.#environment.renderScale.y );\n\t\t\tthis.updateEnvironmentPosition();\n\t\t}\n\t}\n\t\t\t\n\n\thit ( x, y ) {\n\t\treturn this.distance( x, y ) == 0;\n\t}\n\n\tdistance ( position ) {\n\t\tlet dx = position.x - this.x;\n\t\tlet dy = position.y - this.y;\n\t\treturn Math.max( 0, Math.sqrt( dx * dx + dy * dy ) - this.radius );\n\t}\n\n\tsetPosition ( x, y ) {\n\t\tthis.x = Math.min( this.#environment.renderScale.xRatio - this.radius, Math.max( -this.#environment.renderScale.xRatio + this.radius, x ) );\n\t\tthis.y = Math.min( this.#environment.renderScale.yRatio - this.radius, Math.max( -this.#environment.renderScale.yRatio + this.radius, y ) );\n\t}\n\n\tstep( { iteration, render } ) {\n\t\tif( iteration === 0 ){\n\t\t\tthis.setPosition( ( 2 * Math.random() - 1 ) * this.#environment.renderScale.xRatio, ( 2 * Math.random() - 1 ) * this.#environment.renderScale.yRatio );\n\n\t\t\tif( render ){\n\t\t\t\tthis.updateEnvironmentPosition();\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateEnvironmentPosition() {\n\t\tlet position = this.#environment.pixelPosition( {\n\t\t\tx: this.x - this.radius,\n\t\t\ty: this.y - this.radius,\n\t\t} );\n\t\tthis.elem.style.left = position.x + 'px';\n\t\tthis.elem.style.top = position.y + 'px';\n\t}\n\n\ttestFunction( network ) {\n\t\treturn this.distance( network.position ) == 0 ? \n\t\t\t(2 + ( network.totalDistanceTraveled < 5 ? 1 : 0 ) ) : \n\t\t\t0;\n\t}\n\n\tgetElement() {\n\t\treturn this.elem;\n\t}\n\n\tsetInteractive( bool ) {\n\t\tthis.#interactive = bool;\n\t}\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Target);\n\n//# sourceURL=webpack://its-evolution-baby/./target.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;