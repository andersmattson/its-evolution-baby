(()=>{"use strict";function t(t,e,n,i){return isNaN(e-i*e/t+n)?0:parseFloat((e-i*e/t+n).toFixed(2))}function e(e,n,i){if(function(t){[...t.querySelectorAll("*")].forEach((e=>t.removeChild(e)))}(e),n.length<=1)return;const s=(i=i||{}).spotRadius||1,r=2*s,a=parseFloat(e.attributes["stroke-width"].value),o=parseFloat(e.attributes.width.value)-2*r,h=parseFloat(e.attributes.height.value)-2*a-r,l=i.max||Math.max(...n)||100,u=o/(n.length-1),N=t(l,h,a+s,n[0]);let d=`M${r} ${N}`;n.forEach(((e,n)=>{const i=n*u+r,o=t(l,h,a+s,e);d+=` L ${i} ${o}`}));const c=function(t,e){const n=document.createElementNS("http://www.w3.org/2000/svg","path");for(let t in e)n.setAttribute(t,e[t]);return n}(0,{class:"sparkline--line",d,stroke:"black",fill:"none"});e.appendChild(c)}const n=new class{DNA_BASE=4;MAX_NEURONS=255;MAX_CONNECTIONS=255;NEURON_DATA_LENGTH=10;CONNECTION_DATA_LENGTH=10;#t=0;NEURON_TOTAL_LENGTH=-1;NEURON_TYPE_LENGTH=-1;CONNECTION_TOTAL_LENGTH=-1;CONNECTION_INDEX_LENGTH=-1;NEURON_INDEX_LENGTH=-1;NEURON_DATA_MIDDLE=-1;MAXIMUM_MOVING_DISTANCE=.001;ANGLE_LIMIT=4*Math.PI;constructor(){this.DNA_BASE=4,this.MAX_NEURONS=255,this.MAX_CONNECTIONS=255,this.NEURON_DATA_LENGTH=10,this.CONNECTION_DATA_LENGTH=10,this.#t=0,this.NEURON_TOTAL_LENGTH=-1,this.NEURON_TYPE_LENGTH=-1,this.CONNECTION_TOTAL_LENGTH=-1,this.CONNECTION_INDEX_LENGTH=-1,this.NEURON_INDEX_LENGTH=-1,this.NEURON_DATA_MIDDLE=Math.pow(4,this.NEURON_DATA_LENGTH)/2,this.MAXIMUM_MOVING_DISTANCE=.03,this.ANGLE_LIMIT=4*Math.PI,this.updateNeuronTypeCount(this.#t)}get NEURON_TYPES(){return this.#t}set NEURON_TYPES(t){this.updateNeuronTypeCount(t)}updateNeuronTypeCount(t){this.#t=t,this.NEURON_TYPE_LENGTH=this.NEURON_TYPES.toString(this.DNA_BASE).length,this.NEURON_TOTAL_LENGTH=this.NEURON_TYPE_LENGTH+this.NEURON_DATA_LENGTH,this.NEURON_INDEX_LENGTH=this.MAX_NEURONS.toString(this.DNA_BASE).length,this.CONNECTION_INDEX_LENGTH=this.MAX_CONNECTIONS.toString(this.DNA_BASE).length,this.CONNECTION_TOTAL_LENGTH=2*this.CONNECTION_INDEX_LENGTH+this.CONNECTION_DATA_LENGTH}},i={SENSORY:1,SYNAPSE:2,ACTOR:4,GENERATOR:8,INPUTS:6,OUTPUTS:11},s=Object.keys(i).reduce(((t,e)=>(t[i[e]]=e,t)),{}),r=[],a=[],o={};function h(t,e=i.SYNAPSE,s={},a="",h=""){if(o[a])throw new Error(`Neuron definition with name '${a}' already exists.`);t.type=e,t.affects=s,t.neuronName=a,t.description=h,r.push(t),o[a]=t,n.NEURON_TYPES=r.length}function l(t,e){t.iteration++;let n,i=t.selfWeight*t.value;for(let e=0;e<t.inputs.length;e++)i+=t.inputs[e].input.value*t.inputs[e].weight;i+=t.selfWeight*t.value,n=i/(t.inputs.length+1),t.value=r[t.type]({time:e.iteration,position:e.position,distanceToTarget:e.distanceToTarget,targetDirection:e.targetDirection,initialValue:t.initialValue,weightedInput:i,weightedAverage:n,value:t.value,targetVisible:e.targetVisible,lastWeightedInput:t.lastWeightedInput,lastWeightedAverage:t.lastWeightedAverage}),t.lastWeightedInput=i,t.lastWeightedAverage=n}function u({type:t,initialValue:e}){let n=t||0,i=e||0;return{isNeuron:!0,type:n,initialValue:i,value:i,iteration:0,neuronType:r[n].type,inputs:[],selfWeight:0,affects:r[n].affects,lastWeightedInput:0,lastWeightedAverage:0}}const N=2*Math.PI;h((function(t){return 1/(1+t.distanceToTarget)}),i.SENSORY,{},"InvertedTargetDistance","1 / ( 1 + distanceToTarget )"),h((function(t){return t.targetVisible}),i.SENSORY,{},"TargetVisible","targetVisible"),h((function(t){return Math.sin(t.time*t.initialValue)}),i.GENERATOR,{},"Oscillator","sin( time * initialValue )"),h((function(t){return t.initialValue/(1+t.time)}),i.GENERATOR,{},"Decay","initialValue / ( 1 + time )"),h((function(t){return Math.exp(t.time*t.initialValue)}),i.GENERATOR,{},"Exponential","exp( time * initialValue )"),h((function(t){return t.time*t.initialValue}),i.GENERATOR,{},"Growth","time * initialValue"),h((function(t){return t.initialValue}),i.GENERATOR,{},"Constant","initialValue"),h((function(t){return t.weightedInput}),i.SYNAPSE,{},"WeightedSum","weightedInput"),h((function(t){return t.weightedAverage}),i.SYNAPSE,{},"WeightedAverage","weightedAverage"),h((function(t){return Math.tanh(t.weightedInput)}),i.SYNAPSE,{},"Tanh","tanh( weightedInput )"),h((function(t){return t.weightedInput/(1+t.time)}),i.SYNAPSE,{},"WeightedInputDecay","weightedInput / ( 1 + time )"),h((function(t){return t.weightedInput-t.lastWeightedInput}),i.SYNAPSE,{},"WeightedInputDerivative","weightedInput - lastWeightedInput"),h((function(t){return Math.tanh(t.weightedInput)*N}),i.ACTOR,{direction:!0},"Direction","tanh( weightedInput ) * 2Ï€"),h((function(t){return Math.tanh(t.weightedInput)*n.MAXIMUM_MOVING_DISTANCE}),i.ACTOR,{speed:!0},"Speed","tanh( weightedInput ) * MAX_DISTANCE");const d=2*Math.PI,c=(Math.PI,Math.PI,Math.PI/6),E=(Math.PI,Math.PI,d-c);function p(t=0,e=1){return Math.floor(Math.random()*(e-t+1))+t}function g(t,e){let i=t.toString(n.DNA_BASE);return i.length>e?(n.DNA_BASE-1+"").repeat(e):"0".repeat(e-i.length)+i}function T(t,e){let i="",s=t.toString(n.DNA_BASE),a=e.toString(n.DNA_BASE);i+=g(s,n.NEURON_INDEX_LENGTH),i+=g(a,n.CONNECTION_INDEX_LENGTH);for(let e=0;e<t;e++)i+=g(p(0,r.length-1).toString(n.DNA_BASE),n.NEURON_TYPE_LENGTH),i+=g(p(0,Math.pow(n.DNA_BASE,8)).toString(n.DNA_BASE),n.NEURON_DATA_LENGTH);for(let s=0;s<e;s++)i+=g(p(0,t-1).toString(n.DNA_BASE),n.NEURON_INDEX_LENGTH),i+=g(p(0,t-1).toString(n.DNA_BASE),n.NEURON_INDEX_LENGTH),i+=g(p(0,Math.pow(n.DNA_BASE,8)).toString(n.DNA_BASE),n.CONNECTION_DATA_LENGTH);return i}function _(t,e){let i={neurons:[],_connectedNeurons:new Set,connectedNeurons:[],iteration:0,position:{x:2*(Math.random()-.5)*e.xRatio,y:2*(Math.random()-.5)*e.yRatio},direction:Math.random()*d,speed:0,initialPosition:{x:0,y:0},renderScale:{x:1,y:1,xRatio:1,yRatio:1},dna:t,totalDistanceTraveled:0,renderScale:e};return i.initialPosition={...i.position},function(t,e){let i=parseInt(e.substring(0,n.NEURON_INDEX_LENGTH),n.DNA_BASE),s=parseInt(e.substring(n.NEURON_INDEX_LENGTH,n.NEURON_INDEX_LENGTH+n.CONNECTION_INDEX_LENGTH),n.DNA_BASE);for(let s=0;s<i;s++){let i=n.NEURON_INDEX_LENGTH+n.CONNECTION_INDEX_LENGTH+s*n.NEURON_TOTAL_LENGTH,a=parseInt(e.substring(i,i+n.NEURON_TYPE_LENGTH),n.DNA_BASE),o=(parseInt(e.substring(i+n.NEURON_TYPE_LENGTH,i+n.NEURON_TOTAL_LENGTH),n.DNA_BASE)-n.NEURON_DATA_MIDDLE)/n.NEURON_DATA_MIDDLE;a<r.length&&t.neurons.push(u({initialValue:o,type:a}))}for(let r=0;r<s;r++){let s=n.NEURON_INDEX_LENGTH+n.CONNECTION_INDEX_LENGTH+i*n.NEURON_TOTAL_LENGTH+r*n.CONNECTION_TOTAL_LENGTH,a=parseInt(e.substring(s,s+n.NEURON_INDEX_LENGTH),n.DNA_BASE),o=parseInt(e.substring(s+n.NEURON_INDEX_LENGTH,s+n.NEURON_INDEX_LENGTH+n.CONNECTION_INDEX_LENGTH),n.DNA_BASE),h=(parseInt(e.substring(s+n.NEURON_INDEX_LENGTH+n.CONNECTION_INDEX_LENGTH,s+n.CONNECTION_TOTAL_LENGTH),n.DNA_BASE)-n.NEURON_DATA_MIDDLE)/n.NEURON_DATA_MIDDLE;t.neurons[a]&&t.neurons[o]&&m(t,t.neurons[a],t.neurons[o],h)}}(i,t),i}function m(t,e,n,s=1){if(e.isNeuron&&n.isNeuron){const r=function(t,e,n=1){return e===t?0!=(i.INPUTS&t.neuronType)&&0!=(i.OUTPUTS&t.neuronType)&&(t.selfWeight=n,!0):0!=(i.OUTPUTS&e.neuronType)&&0!=(i.INPUTS&t.neuronType)&&(t.inputs.push({input:e,weight:n}),!0)}(n,e,s);return r&&(t._connectedNeurons.has(e)||(t._connectedNeurons.add(e),t.connectedNeurons.push(e)),t._connectedNeurons.has(n)||(t._connectedNeurons.add(n),t.connectedNeurons.push(n))),r}return!1}function v(t,e=.01){let i=Math.random(),s=t.dna;if(i<e){let e=p(n.NEURON_INDEX_LENGTH+n.CONNECTION_INDEX_LENGTH,t.dna.length-1);s=t.dna.substring(0,e-1)+p(0,n.DNA_BASE-1)+t.dna.substring(e)}return _(s,t.renderScale)}function S(t,e){t.iteration++;let i=1/0,s={x:0,y:0},r=0,a=0,o=0;for(let n=0;n<e.length;n++){let r=e[n].distance(t.position);r<i&&(i=r,s={x:e[n].x-t.position.x,y:e[n].y-t.position.y})}r=Math.atan2(s.y,s.x),r+=r<0?d:0;let h=Math.abs(r-t.direction),u=0;h<c||h>E?u=1:i=1/0;for(let e=0,n=t.connectedNeurons.length;e<n;e++)l(t.connectedNeurons[e],{iteration:t.iteration,distanceToTarget:i,targetVisible:u}),t.connectedNeurons[e].affects.direction&&(a+=t.connectedNeurons[e].value),t.connectedNeurons[e].affects.speed&&(o+=t.connectedNeurons[e].value);t.direction=(t.direction+Math.max(-n.ANGLE_LIMIT,Math.min(n.ANGLE_LIMIT,a)))%d,t.direction+=t.direction<0?d:0,t.speed=Math.max(0,Math.min(n.MAXIMUM_MOVING_DISTANCE,t.speed+o)),t.position.x+=t.speed*Math.cos(t.direction),t.position.y+=t.speed*Math.sin(t.direction),t.position.x=Math.min(Math.max(t.position.x,-t.renderScale.xRatio),t.renderScale.xRatio),t.position.y=Math.min(Math.max(t.position.y,-t.renderScale.yRatio),t.renderScale.yRatio),t.totalDistanceTraveled+=t.speed}const A=180/Math.PI;function I(t){return document.querySelector(t)}function L(){I(".active_neuron_types").innerText=r.length,I(".disabled_neuron_types").innerText=a.length+r.length}function O(t){t=t||w.stats,I(".stats"),["generation","survivalRate","size","connectedNeuronsAvg","connectedNeurons","avgDistanceTraveled","avgDnaLength","duration","targetAreaRatio"].forEach((e=>{I(`.stats .${e}`).innerHTML=t[e]})),I(".currentDNA")!==document.activeElement&&(I(".currentDNA").innerHTML=t.currentDNA),R.shift(),R.push(t.survivalRate),e(I(".sparkline"),R,f),r.forEach(((e,n)=>{t.neuronsInUse.has(e.neuronName)?I(`.inuse_${e.neuronName}`).classList.add("active"):I(`.inuse_${e.neuronName}`).classList.remove("active")}))}function D(t){let e=I(".neuron_list"),n=t.neuronName,i=document.createElement("div");i.classList.add("nDef"),i.innerHTML=`<input type="checkbox" value="${n}" class="${n}" checked />\n\t<div>\n\t\t<div>${n} <span class="inuse inuse_${n}">In use</span></div>\n\t\t<div class="nDefType">Type: ${s[t.type]}, affects: ${Object.keys(t.affects).join()||"none"}</div>\n\t\t<div class="nDefDesc">f=${o[n].description}</div>\n\t</div>`,e.appendChild(i)}L(),[{title:"Sensors",type:i.SENSORY},{title:"Generators",type:i.GENERATOR},{title:"Synapses",type:i.SYNAPSE},{title:"Actors",type:i.ACTOR}].forEach((t=>{!function(t,e){let n=I(".neuron_list"),i=document.createElement("h3");i.innerText=e,n.appendChild(i),Object.values(o).filter((e=>e.type===t)).forEach(D)}(t.type,t.title)})),I(".apply_neurons").addEventListener("click",(t=>{confirm("This will reset the current simulation!")&&((".nDef",document.querySelectorAll(".nDef")).forEach((t=>{let e=t.querySelector("input");e.checked?(function(t){let e=a.findIndex((e=>e.neuronName===t));-1!==e&&(r.push(a[e]),a.splice(e,1),n.NEURON_TYPES=r.length)}(e.value),t.classList.remove("disabled")):(function(t){let e=r.findIndex((e=>e.neuronName===t));-1!==e&&(a.push(r[e]),r.splice(e,1),n.NEURON_TYPES=r.length)}(e.value),t.classList.add("disabled"))})),L(),w.reset())})),I(".hide_neurons").addEventListener("click",(()=>{I(".neuron_list").classList.toggle("hidden")})),I(".display_neurons").addEventListener("click",(()=>{I(".neuron_list").classList.toggle("hidden")})),I(".show_info").addEventListener("click",(()=>{I(".neuron_list").classList.toggle("info_visible")}));let R=new Array(100).fill(0),f={spotRadius:0,max:100};e(I(".sparkline"),R,f);const w=new class extends class{#e={};addEventListener(t,e){this.#e[t]||(this.#e[t]=[]),this.#e[t].push(e)}removeEventListener(t,e){this.#e[t].splice(this.#e[t].indexOf(e),1)}dispatchEvent(t,e){this.#e[t]&&this.#e[t].length&&this.#e[t].forEach((t=>{t.bind(this)(e)}))}}{#n=[];#i=[];renderScale={x:1,y:1,xRatio:1,yRatio:1};#s={x:-2,y:-2};#r;#a=null;#o=0;#h=0;#l=0;#u=0;#N=16;#d=100;#c=100;#E=.01;#p=0;#g=!1;#T=10;#_=10;#m=!1;#v=!1;#S=!1;#A=[];#I=!1;#L=null;#O="";targetArea=0;area=0;started=!1;constructor({canvas:t,maxIterations:e,numNetworks:n,mutationRate:i,waitForStart:s,numNeurons:r,numConnections:a,randomInitSpawn:o,render:h,survivorsOnly:l}){super(),this.#r=t,this.renderScale={x:t.offsetWidth/2,y:t.offsetHeight/2},this.renderScale.x>this.renderScale.y?(this.renderScale.xRatio=this.renderScale.x/this.renderScale.y,this.renderScale.yRatio=1,this.renderScale.pixelScale=this.renderScale.y):(this.renderScale.xRatio=1,this.renderScale.yRatio=this.renderScale.y/this.renderScale.x,this.renderScale.pixelScale=this.renderScale.x),this.area=4*this.renderScale.xRatio*this.renderScale.yRatio,this.#d=e||100,this.#c=n||100,this.#E=i||.01,this.#g=!0,this.#T=r||10,this.#_=a||10,this.#p=this.#c,this.#m=o||!1,this.#v=h||!0,this.#S=l||!1,this.#o=0,this.#N=16,this.initRepresentation(),this.initRandomNetworks(),requestAnimationFrame(this.renderNetworks.bind(this)),s||this.togglePause()}initRepresentation(){this.#i=[],document.querySelectorAll(".network").forEach((t=>{t.parentElement.removeChild(t)}));for(let t=0;t<this.#c;t++){let e=document.createElement("div");e.classList.add("network"),e.classList.add(`rep${t}`),this.#r.appendChild(e),this.#i.push(e)}}getRep(t){return this.#i[t]}addNetwork(t){if(this.#n.push(t),this.#v){let e=this.getRep(this.#n.length-1),n=this.pixelPosition(t.position);e.style.display="block",e.style.left=n.x+"px",e.style.top=n.x+"px"}}clearNetworks(){let t=0;for(;this.#n.length;)t<this.#i.length&&(this.getRep(t).style.display="none"),this.#n.shift(),t++}renderNetworks(){for(let t=0;t<this.#n.length;t++){let e=this.pixelPosition(this.#n[t].position),n=this.getRep(t);n.style.left=e.x+"px",n.style.top=e.y+"px",n.style.display="block",n.style.transform=`rotate(${this.#n[t].direction*A}deg)`}this.#v&&requestAnimationFrame(this.renderNetworks.bind(this))}initRandomNetworks(){this.clearNetworks(),this.#h=0,this.#o++;let t=T(this.#T,this.#_);this.#L=t,this.#O=t;for(let e=0;e<this.#c;e++)this.#m&&(t=T(this.#T,this.#_)),this.addNetwork(_(t,this.renderScale))}initNetworksFromDnaSequence(t){this.reset(!1),this.initRepresentation(),this.#L=t.replace(/A/g,"0").replace(/C/g,"1").replace(/G/g,"2").replace(/T/g,"3");for(let t=0;t<this.#c;t++)this.addNetwork(_(this.#L,this.renderScale))}regenerateNetworks(){this.#l=0,this.#h++;let t=[];this.#p=0;let e=[];for(this.#n.forEach(((t,n)=>{let i=this.#A.reduce(((e,n)=>e+n.testFunction(t)),0);i&&(this.#p++,this.#O=t.dna);let s=i+(this.#S?0:1);for(let t=0;t<s;t++)e.push(n)}));t.length<this.#c;)t.push(v(this.#n[e[Math.floor(Math.random()*e.length)]],this.#E));this.clearNetworks(),this.#n=t}step(){this.#A.forEach((t=>{t.step({iteration:this.#l,render:this.#v,renderScale:this.renderScale})}));for(let t=0,e=this.#n.length;t<e;t++)S(this.#n[t],this.#A);this.#l++}start(){0===this.#n.length?this.initRandomNetworks():this.regenerateNetworks(),this.started=!0,this.#u=Date.now();let t=this._step.bind(this);for(let e=0;e<this.#d;e++)setTimeout(t,this.#N*e)}_step(){this.step(),this.#l>=this.#d&&!this.#I&&this.stop()}stop(){clearInterval(this.#a);const t=this.stats;t.survivalRate=(100*this.#p/this.#c).toFixed(2),!this.#g&&this.#n.length&&this.start(),this.dispatchEvent("generation",t)}addTarget(t){this.#A.push(t),this.#r.parentNode.appendChild(t.getElement()),t.getElement().style.width=2*t.radius*this.renderScale.x/this.renderScale.xRatio+"px",t.getElement().style.height=2*t.radius*this.renderScale.y/this.renderScale.yRatio+"px",this.targetArea+=t.area}togglePause(t){return this.#g=void 0===t?!this.#g:t,this.#g?this.dispatchEvent("pause",!0):(this.start(),this.dispatchEvent("pause",!1)),this.#g}toggleRender(){return this.#v=!this.#v,this.#v&&this.renderNetworks(),this.#v}toggleInteractiveMode(){this.#I=!this.#I,this.#A.forEach((t=>{t.setInteractive(this.#I)}))}updateStepDelay(t){this.#N=t||0}pixelPosition(t){return{x:this.renderScale.x+t.x*this.renderScale.pixelScale,y:this.renderScale.y+t.y*this.renderScale.pixelScale}}reset(t=!0){let e=this.#g;this.togglePause(!0),this.clearNetworks(),clearInterval(this.#a),this.#n.length=0,this.#l=0,this.#h=0,this.#o=0,this.#p=0,t&&this.initRandomNetworks(),this.togglePause(e),this.dispatchEvent("reset")}get size(){return this.#n.length}get stats(){let t=0,e=0,n=0,i=0,s=new Set;return this.#n.forEach((a=>{a.position.x!==a.initialPosition.x&&a.position.y!==a.initialPosition.y&&e++,t+=a.connectedNeurons.length,n+=a.totalDistanceTraveled,i+=a.dna.length,a.connectedNeurons.forEach((t=>{s.add(r[t.type].neuronName)}))})),{generation:this.#h,survivalRate:this.started?1*(100*this.#n.length/this.#p).toFixed(2):0,size:this.#n.length,connectedNeurons:t,connectedNeuronsAvg:1*(t/this.#n.length).toFixed(2),outputs:0,hasMoved2D:e,avgDistanceTraveled:1*(n/this.#n.length).toFixed(2),avgDnaLength:1*(i/this.#n.length).toFixed(2),totalDnaLength:i,duration:this.started?Date.now()-this.#u:0,currentDNA:(a=this.#O,a.replace(/0/g,"A").replace(/1/g,"C").replace(/2/g,"G").replace(/3/g,"T")),targetAreaRatio:1*(100*this.targetAreaRatio).toFixed(2),neuronsInUse:s};var a}get stepDelay(){return this.#N}get mutationRate(){return this.#E}set mutationRate(t){this.#E=Math.min(1,Math.max(0,t))}get numNetworks(){return this.#c}set numNetworks(t){this.#c=parseInt(t),this.initRepresentation(),this.reset()}get numNeurons(){return this.#T}set numNeurons(t){this.#T=parseInt(t),this.reset()}get numConnections(){return this.#_}set numConnections(t){this.#_=parseInt(t),this.reset()}get targetsArea(){return this.#A.reduce(((t,e)=>t+e.area),0)}get targetAreaRatio(){return this.targetArea/this.area}get maxIterations(){return this.#d}set maxIterations(t){this.#d=parseInt(t)}get generation(){return this.#h}get iteration(){return this.#l}}({canvas:I(".environment"),numNetworks:400,numNeurons:32,numConnections:64,mutationRate:.5,waitForStart:!0,randomInitSpawn:!0,survivorsOnly:!1});let y;w.addTarget(new class{elem;#D=!1;#R=null;#f=!1;#w;#y;area=0;constructor(t,e,n,i,s){this.x=e,this.y=n,this.radius=i,this.color=s,this.#R=t,this.area=Math.PI*this.radius*this.radius,this.elem=document.createElement("div"),this.elem.className="target",this.elem.style.backgroundColor=s,this.elem.style.borderRadius="50%",this.elem.style.position="absolute",this.elem.addEventListener("mousedown",this.onMouseDown.bind(this)),this.elem.addEventListener("mouseup",this.onMouseUp.bind(this)),this.elem.addEventListener("mousemove",this.onMouseMove.bind(this)),this.setPosition(e,n),this.updateEnvironmentPosition()}onMouseDown(t){this.#D&&(this.#f=!0,this.#w={x:t.clientX,y:t.clientY},this.#y={x:this.x,y:this.y})}onMouseUp(t){this.#f=!1}onMouseMove(t){if(this.#D&&this.#f){let e=t.clientX-this.#w.x,n=t.clientY-this.#w.y;this.setPosition(this.#y.x+e/this.#R.renderScale.x,this.#y.y+n/this.#R.renderScale.y),this.updateEnvironmentPosition()}}hit(t,e){return 0==this.distance(t,e)}distance(t){let e=t.x-this.x,n=t.y-this.y;return Math.max(0,Math.sqrt(e*e+n*n)-this.radius)}setPosition(t,e){this.x=Math.min(this.#R.renderScale.xRatio-this.radius,Math.max(-this.#R.renderScale.xRatio+this.radius,t)),this.y=Math.min(this.#R.renderScale.yRatio-this.radius,Math.max(-this.#R.renderScale.yRatio+this.radius,e))}step({iteration:t,render:e}){0===t&&(this.setPosition((2*Math.random()-1)*this.#R.renderScale.xRatio,(2*Math.random()-1)*this.#R.renderScale.yRatio),e&&this.updateEnvironmentPosition())}updateEnvironmentPosition(){let t=this.#R.pixelPosition({x:this.x-this.radius,y:this.y-this.radius});this.elem.style.left=t.x+"px",this.elem.style.top=t.y+"px"}testFunction(t){return 0==this.distance(t.position)?2+(t.totalDistanceTraveled<5?1:0):0}getElement(){return this.elem}setInteractive(t){this.#D=t}}(w,.5,.5,.2,"#ffff00",w.renderScale)),w.addEventListener("generation",O),w.addEventListener("reset",O),w.dispatchEvent("reset"),w.addEventListener("pause",(t=>{I(".pausa").innerHTML=t?"Start":"Pause"})),I(".pausa").addEventListener("click",(()=>w.togglePause())),I(".render").addEventListener("click",(()=>w.toggleRender())),I(".interactive").addEventListener("click",(()=>w.toggleInteractiveMode())),I(".stepDelay").addEventListener("input",(t=>{w.updateStepDelay(t.target.value),I(".speed").innerHTML=w.stepDelay})),I(".speed_reset").addEventListener("click",(t=>{w.updateStepDelay(16),I(".stepDelay").value=16,I(".speed").innerHTML=w.stepDelay})),I(".mutation_rate").addEventListener("input",(t=>{w.mutationRate=parseInt(t.target.value)/100,I(".mutrate").innerHTML=parseInt(t.target.value)})),I(".num_networks").addEventListener("change",(t=>{confirm("This will reset the network.")?w.numNetworks=t.target.value:t.target.value=w.numNetworks,I(".nonetworks").innerHTML=w.numNetworks})),I(".num_networks").addEventListener("input",(t=>{I(".nonetworks").innerHTML=t.target.value})),I(".num_neurons").addEventListener("change",(t=>{confirm("This will reset the network.")?w.numNeurons=t.target.value:t.target.value=w.numNeurons,I(".noneurons").innerHTML=w.numNeurons})),I(".num_neurons").addEventListener("input",(t=>{I(".noneurons").innerHTML=t.target.value})),I(".num_connections").addEventListener("change",(t=>{confirm("This will reset the network.")?w.numConnections=t.target.value:t.target.value=w.numConnections,I(".noconnections").innerHTML=w.numConnections})),I(".num_connections").addEventListener("input",(t=>{I(".noconnections").innerHTML=t.target.value})),I(".max_iter").addEventListener("input",(t=>{w.maxIterations=t.target.value,I(".noiter").innerHTML=w.maxIterations})),I(".iter_reset").addEventListener("click",(t=>{w.maxIterations=100,I(".max_iter").value=100,I(".noiter").innerHTML=w.maxIterations})),I(".currentDNA").addEventListener("input",(t=>{0===w.generation&&0===w.iteration&&(y&&clearTimeout(y),y=setTimeout((()=>{w.initNetworksFromDnaSequence(t.target.value),I(".connectedNeurons").innerHTML=w.stats.connectedNeurons,I(".connectedNeuronsAvg").innerHTML=w.stats.connectedNeuronsAvg}),1e3))}))})();